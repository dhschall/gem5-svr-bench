# Copyright (c) 2024 The Regents of the University of California
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met: redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer;
# redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution;
# neither the name of the copyright holders nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

"""
This script is used to analyze a full-system workload to create simpoints.
After analysis this script can also be used to create checkpoints at the
specific time stamp which is computed by the simpoint tool.

A workflow has three steps:
1. Analysie the workload with the --simpoint-mode=analysis
2. Use the simpoint tool to calculate the most representative regions in
   in the workload
3. Run the workload again with the --simpoint-mode=checkpoint and the
   --simpoint-dir argument to the folder containing the simpoint and weight
   files generated by the simpoint tool.

Usage
-----

gem5 fs-simpoint.py --workload <workload> --simpoint-mode<analysis/checkpoint>

"""

import argparse
from pathlib import Path

from gem5.resources.resource import obtain_resource,KernelResource,DiskImageResource
from gem5.components.boards.simple_board import SimpleBoard
from gem5.components.cachehierarchies.classic.no_cache import NoCache
from gem5.components.memory.single_channel import SingleChannelDDR3_1600
from gem5.components.processors.cpu_types import CPUTypes
from gem5.components.processors.simple_processor import SimpleProcessor
from gem5.isas import ISA
from gem5.simulate.exit_event import ExitEvent
from gem5.simulate.exit_event_generators import simpoints_save_checkpoint_generator
from gem5.simulate.simulator import Simulator
from gem5.resources.resource import BinaryResource, SimpointDirectoryResource
from gem5.utils.requires import requires
from util.workloads import *
from util.arguments import *

# requires(isa_required=ISA.X86)
requires(isa_required=ISA.ARM)

cache_hierarchy = NoCache()
memory = SingleChannelDDR3_1600(size="3GB")


if args.simpoint_mode not in ["analysis", "checkpoint"]:
    print("Simpoint mode must be 'analysis' or 'checkpoint'")
    exit(1)




processor = SimpleProcessor(
    cpu_type=CPUTypes.ATOMIC,
    isa=ISA.ARM,
    num_cores=2,
)

if args.simpoint_mode == "analysis":
    ## Set the simpoint interval
    processor.get_cores()[-1].core.addSimPointProbe(200_000_000)


if args.simpoint_mode == "checkpoint":
    ## Read the starting points for the checkpoints
    
    simpoint_info = SimpointDirectoryResource(
        local_path=Path(f"{args.simpoint_dir}/{args.workload}"),
        simpoint_file="results.simpts",
        weight_file="results.weights",
        simpoint_interval=200_000_000,
        warmup_interval=100_000_000
    )
    processor.get_cores()[-1]._set_simpoint(
        inst_starts=simpoint_info.get_simpoint_start_insts(),
        board_initialized=False,
    )


#  The ArmBoard allows for Full-System ARM simulations.
from gem5.components.boards.arm_board import ArmBoard
from m5.objects import (
    ArmDefaultRelease,
    VExpress_GEM5_V1,
)

board = ArmBoard(
    clk_freq="3GHz",
    processor=processor,
    memory=memory,
    cache_hierarchy=cache_hierarchy,
    # # The ArmBoard requires a `release` to be specified. This adds all the
    #     # extensions or features to the system. We are setting this to Armv8
    #     # (ArmDefaultRelease) in this example config script.
    release = ArmDefaultRelease.for_kvm(),
    # The platform sets up the memory ranges of all the on-chip and
    # off-chip devices present on the ARM system. ARM KVM only works with
    # VExpress_GEM5_V1 on the ArmBoard at the moment.
    platform = VExpress_GEM5_V1(),
)



kernel_args = [
    'isolcpus=1',
    'cloud-init=disabled',
    'mitigations=off',
]
if args.isa == "Arm":
    kernel_args += [
        "console=ttyAMA0",
        "lpj=19988480", "norandmaps",
        "root=/dev/vda2",
    ]
elif args.isa == "X86":
    kernel_args += [
        "console=ttyS0",
        "lpj=7999923",
        "root=/dev/sda2",
    ]

# Here we set a full system workload.
board.set_kernel_disk_workload(
    kernel=KernelResource(args.kernel),
    disk_image=DiskImageResource(args.disk),
    bootloader=obtain_resource("arm64-bootloader") if args.isa == "Arm" else None,
    readfile_contents=wlcfg[args.workload]["runscript"](wlcfg[args.workload], 1),
    kernel_args=kernel_args,
    checkpoint=Path("{}/{}".format(args.checkpoint_dir, args.workload)),
)

on_exit_event = None
if args.simpoint_mode == "checkpoint":
    on_exit_event={
        # using the SimPoints event generator in the standard library to take
        # checkpoints
        ExitEvent.SIMPOINT_BEGIN: simpoints_save_checkpoint_generator(
                                        Path(f"{args.checkpoint_dir}/{args.workload}"), 
                                        simpoint_info
                                    )
    },

simulator = Simulator(
    board=board,
    on_exit_event=on_exit_event,
)

simulator.run()

print("Simulation Done")
